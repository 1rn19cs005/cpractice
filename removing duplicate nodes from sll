#include <stdio.h>
#include <stdlib.h>

struct node
{
    int empid;
    struct node *link;
};

typedef struct node *NODE;

NODE getnode();
NODE insert(NODE first);
NODE delete_duplicate(NODE first);
void display(NODE first);


int main()
{
    NODE first = NULL;
    printf("Inserting the  SLL\n");
    int m;
    printf("enter the number of elements\n");
    scanf("%d",&m);
    for(int i=0;i<m;i++){
        first = insert(first);
    }
    printf("original sll\n");
    display(first);
    first = delete_duplicate(first);
    printf("\nThe new SLL is \n");
    display(first);
    return 0;
}

NODE getnode()
{
    NODE x;
    x = (NODE)malloc(sizeof(struct node));
    if (x == NULL)
    {
        printf("\nMemory was not allocated !");
        exit(0);
    }
    return x;
}

NODE insert(NODE first)
{
    int x;
    printf("Enter the number to be inserted : ");
    scanf("%d", &x);

    NODE new = getnode();
    new->empid = x;
    new->link = first;
    first = new;
    return first;
}



void display(NODE first)
{
    if (first == NULL)
    {
        printf("The LL is empty!\n");
        return;
    }
    printf("The LL is : \n");
    NODE curr = first;
    while (curr != NULL)
    {
        printf("%d\n", curr->empid);
        curr = curr->link;
    }
}

NODE delete_duplicate(NODE first){
    NODE current = first, index = NULL, temp = NULL;  
      
    if(first == NULL) {  
        return NULL;  
    }  
    else {  
        while(current != NULL){  
            temp = current;  
            
            index = current->link;  
              
            while(index != NULL) {  
                
                if(current->empid == index->empid) {  
                   
                    temp->link = index->link;  
                }  
                else {  
                    
                    temp = index;  
                }  
                index = index->link;  
            }  
            current = current->link;  
        }          
    }
    return first;
}
